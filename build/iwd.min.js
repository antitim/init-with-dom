(function () {
'use strict';

var camelCase = (function (name) {
  return name.replace(/-([a-z])/g, function (g) {
    return g[1].toUpperCase();
  });
});

var getAttr = (function (element) {
  var attr = {
    data: {}
  };

  for (var i = 0; i < element.attributes.length; i++) {
    var key = element.attributes[i].name;
    var value = element.attributes[i].textContent;

    if (key.slice(0, 4) === 'data') {
      key = key.slice(5);
      key = camelCase(key);
      attr.data[key] = value;
    } else {
      key = camelCase(key);
      attr[key] = value;
    }
  }

  return attr;
});

var init = (function (nodes) {
  for (var i = 0; i < nodes.length; i++) {
    var item = nodes[i];

    if (!item.getAttribute) break;
    var name = item.getAttribute('data-js');

    if (!name) break;
    var classes = item.classList;
    classes.add('js');

    if (!classes.contains('js_inited')) {
      if (typeof window[name] === 'function') {
        window[name].call(item, getAttr(item));
        classes.add('js_inited');
      }
    }
  }
});

var trigger = (function (target, eventName, detail) {
  var event = void 0;

  try {
    event = new CustomEvent(eventName, {
      detail: detail
    });
  } catch (e) {
    event = document.createEvent('CustomEvent');
    event.initCustomEvent(eventName, false, false, detail);
  }

  target.dispatchEvent(event);
});

/**
 * IWD. https://github.com/antitim/init-with-dom
 * @version 1.1.0
 * @author Maximilian Timofeev <antitim@yandex.ru>
 */

var Observer = window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver;

if (Observer) {
  var observer = new Observer(function (mutations) {
    mutations.forEach(function (mutation) {
      if (mutation.type === 'childList') {
        init(mutation.addedNodes);
      }

      if (mutation.type === 'attributes') {
        trigger(mutation.target, 'iwdUpdate', {
          attribute: mutation.attributeName
        });
      }
    });
  });

  observer.observe(document.body, {
    childList: true,
    attributes: true,
    subtree: true
  });
} else {
  /**
   * For IE 10
   */
  document.addEventListener('DOMNodeInserted', function (e) {
    if (e.target.constructor !== NodeList) {
      init([e.target]);
    } else {
      init(e.target);
    }
  }, false);

  document.addEventListener('DOMAttrModified', function (e) {
    trigger(e.target, 'iwdUpdate', {
      attribute: e.attrName
    });
  }, false);
}

init(document.querySelectorAll('[data-js]'));

}());
